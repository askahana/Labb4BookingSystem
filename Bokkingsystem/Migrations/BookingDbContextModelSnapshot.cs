// <auto-generated />
using System;
using Bokkingsystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bokkingsystem.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    partial class BookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingModels.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("BookedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            BookedDate = new DateTime(2024, 4, 23, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 5, 25, 15, 24, 3, 710, DateTimeKind.Local).AddTicks(7375),
                            CustomerId = 1
                        },
                        new
                        {
                            AppointmentId = 2,
                            BookedDate = new DateTime(2024, 4, 25, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 5, 25, 15, 24, 3, 710, DateTimeKind.Local).AddTicks(7428),
                            CustomerId = 1
                        },
                        new
                        {
                            AppointmentId = 3,
                            BookedDate = new DateTime(2024, 4, 29, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 5, 25, 15, 24, 3, 710, DateTimeKind.Local).AddTicks(7437),
                            CustomerId = 1
                        },
                        new
                        {
                            AppointmentId = 4,
                            BookedDate = new DateTime(2024, 5, 21, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 5, 25, 15, 24, 3, 710, DateTimeKind.Local).AddTicks(7446),
                            CustomerId = 1
                        },
                        new
                        {
                            AppointmentId = 5,
                            BookedDate = new DateTime(2024, 5, 22, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 5, 25, 15, 24, 3, 710, DateTimeKind.Local).AddTicks(7454),
                            CustomerId = 2
                        });
                });

            modelBuilder.Entity("BookingModels.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "Saftfabriken"
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "Pommesfabriken"
                        });
                });

            modelBuilder.Entity("BookingModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "andre@mail.se",
                            FirstName = "Andreas",
                            LastName = "Andersson",
                            Password = "1234",
                            UserName = "Andreas"
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "benben@mail.se",
                            FirstName = "Bengt",
                            LastName = "Bengtsson",
                            Password = "1234",
                            UserName = "benben"
                        },
                        new
                        {
                            CustomerId = 3,
                            Email = "carl@mail.se",
                            FirstName = "Carl",
                            LastName = "Carlsson",
                            Password = "1234",
                            UserName = "carlycarl"
                        });
                });

            modelBuilder.Entity("BookingModels.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HistoryId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("BookingModels.Appointment", b =>
                {
                    b.HasOne("BookingModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingModels.Customer", "Customer")
                        .WithMany("Appointment")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingModels.History", b =>
                {
                    b.HasOne("BookingModels.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BookingModels.Customer", b =>
                {
                    b.Navigation("Appointment");
                });
#pragma warning restore 612, 618
        }
    }
}
